package br.com.crudmongo.business;

import static br.com.crudmongo.util.ValidationExceptionProperties.USER_NOT_FOUND;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.crudmongo.collection.UserCollection;
import br.com.crudmongo.repository.UserRepository;
import br.com.crudmongo.util.UserExceptionUtil;
import br.com.crudmongo.validation.UserValidator;

/**
 * Business class to be used by User flow.
 *
 * @author lucasandrade
 */
@Service
public class UserBusiness {

	@Autowired
	private UserValidator validator;

	@Autowired
	private UserRepository repository;

	@Autowired
	private UserExceptionUtil exceptionUtil;

	/**
	 * Creates a new user in the database.
	 *
	 * @param user
	 *            - the {@link UserCollection} object to be persisted.
	 * @return the new Id generated by database to the {@link UserCollection} object
	 *         persisted.
	 * @throws Exception
	 *             if the User parameter is not valid.
	 */
	public String create(UserCollection user) throws Exception {
		validator.isValid(user);

		return repository.save(user).getId();
	}

	/**
	 * Deletes an existent {@link UserCollection} entry.
	 *
	 * @param userId
	 *            - the attribute Id of the User to be deleted.
	 * @throws Exception
	 *             if the userId parameter is not valid.
	 */
	public void delete(String userId) throws Exception {
		UserCollection user = find(userId);

		repository.delete(user);
	}

	/**
	 * Deletes all Users existent in the database.
	 */
	public void delete() {
		repository.deleteAll();
	}

	/**
	 * Finds an {@link UserCollection} entry by it's Id.
	 *
	 * @param userId
	 *            - the attribute Id of the User to be found.
	 * @return an {@link UserCollection} object.
	 * @throws Exception
	 *             if the User Id parameter is not valid.
	 */
	public UserCollection find(String userId) throws Exception {
		validator.isUserIdValid(userId);

		UserCollection user = repository.findOne(userId);

		if (user == null) {
			throw new Exception(exceptionUtil.getExceptionMessage(USER_NOT_FOUND));
		}
		return user;
	}

	/**
	 * Finds all {@link UserCollection} entries in the database.
	 *
	 * @return a list of {@link UserCollection}.
	 */
	public List<UserCollection> findAll() {
		List<UserCollection> users = repository.findAll();
		// users.sort(comparing(user -> user.getName()));
		return users;
	}

	/**
	 * Updates the {@link UserCollection} entry passed as parameter.
	 *
	 * @param user
	 *            - the User to be updated.
	 * @throws Exception
	 *             if the User parameter is not valid.
	 */
	public void update(UserCollection user) throws Exception {
		validator.isUserIdValid(user.getId());

		UserCollection userToUpdate = find(user.getId());
		userToUpdate = user;
		repository.save(userToUpdate);
	}
}